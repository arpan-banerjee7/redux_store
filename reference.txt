// store.dispatch(addTodoAction({
      //   id: 0,
      //   name: 'Walk the dog',
      //   complete: false,
      // }))

      // store.dispatch(addTodoAction({
      //   id: 1,
      //   name: 'Wash the car',
      //   complete: false,
      // }))

      // store.dispatch(addTodoAction({
      //   id: 2,
      //   name: 'Go to the gym',
      //   complete: true,
      // }))

      // store.dispatch(removeTodoAction(1))

      // store.dispatch(toggleTodoAction(0))

      // store.dispatch(addGoalAction({
      //   id: 0,
      //   name: 'Learn Redux'
      // }))

      // store.dispatch(addGoalAction({
      //   id: 1,
      //   name: 'Lose 20 pounds'
      // }))

      // store.dispatch(removeGoalAction(0))


    //custom store
     // Library code
      function createStore(reducer) {
        // The store should have four parts
        // 1. The state
        // 2. Get the state. (getState)
        // 3. Listen to changes on the state. (subscribe)
        // 4. Update the state (dispatch)

        let state;
        let listeners = [];--> array of functions

        const getState = () => state;

//whenever the state changes, we as implementers of the store should make sure to callany of the functions passed to
//subscribe method (taken care by dispatch)

//it also returns a function which when invoked will remove that particluar function from listening to state change
        const subscribe = (listener) => {
          listeners.push(listener);
          return () => {
            listeners = listeners.filter((l) => l !== listener);
          };
        };

        const dispatch = (action) => {
          state = reducer(state, action);
          listeners.forEach((listener) => listener());-->when state changes loop through all listeners and clal them
        };

        return {
          getState,
          subscribe,
          dispatch,
        };
      }

      //custom middleware

        function checkAndDispatch(store, action) {
        if (
          action.type === ADD_TODO &&
          action.todo.name.toLowerCase().indexOf("bitcoin") !== -1
        ) {
          return alert("Nope. That's a bad idea.");
        }

        if (
          action.type === ADD_GOAL &&
          action.goal.name.toLowerCase().indexOf("bitcoin") !== -1
        ) {
          return alert("Nope. That's a bad idea.");
        }

        return store.dispatch(action);
      }
      ************************************************************************************************

      HTML 
      <div>
      <h1>Todo List</h1>
      <input id="todo" type="text" placeholder="Add Todo" />
      <button id="todoBtn">Add Todo</button>
      <ul id="todos"></ul>
    </div>
    <div>
      <h1>Goals</h1>
      <input id="goal" type="text" placeholder="Add Goal" />
      <button id="goalBtn">Add Goal</button>
      <ul id="goals"></ul>
    </div>
                                 ------------------------------------

                                  store.subscribe(() => {
        const { goals, todos } = store.getState();

        document.getElementById("goals").innerHTML = "";
        document.getElementById("todos").innerHTML = "";

        goals.forEach(addGoalToDOM);
        todos.forEach(addTodoToDOM);
      });


 // DOM code
      function createRemoveButton(onClick) {
        const removeBtn = document.createElement("button");
        removeBtn.innerHTML = "X";
        removeBtn.addEventListener("click", onClick);

        return removeBtn;
      }

      function addTodoToDOM(todo) {
        const node = document.createElement("li");
        const text = document.createTextNode(todo.name);

        const removeBtn = createRemoveButton(() => {
          store.dispatch(removeTodoAction(todo.id));
        });

        node.appendChild(text);
        node.appendChild(removeBtn);

        node.style.textDecoration = todo.complete ? "line-through" : "none";
        node.addEventListener("click", () => {
          store.dispatch(toggleTodoAction(todo.id));
        });

        document.getElementById("todos").appendChild(node);
      }

      function addGoalToDOM(goal) {
        const node = document.createElement("li");
        const text = document.createTextNode(goal.name);

        const removeBtn = createRemoveButton(() => {
          store.dispatch(removeGoalAction(goal.id));
        });

        node.appendChild(text);
        node.appendChild(removeBtn);

        document.getElementById("goals").appendChild(node);
      }

      function addTodo() {
        const input = document.getElementById("todo");
        const name = input.value;
        input.value = "";

        store.dispatch(
          addTodoAction({
            id: generateId(),
            name,
            complete: false,
          })
        );
      }

      function addGoal() {
        const input = document.getElementById("goal");
        const name = input.value;
        input.value = "";

        store.dispatch(
          addGoalAction({
            id: generateId(),
            name,
          })
        );
      }

      document.getElementById("todoBtn").addEventListener("click", addTodo);

      document.getElementById("goalBtn").addEventListener("click", addGoal);

